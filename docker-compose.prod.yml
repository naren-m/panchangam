version: '3.8'

services:
  # PostgreSQL database (if needed for future features)
  postgres:
    image: postgres:15-alpine
    container_name: panchangam-postgres
    environment:
      POSTGRES_DB: panchangam
      POSTGRES_USER: panchangam
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-panchangam123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U panchangam"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: panchangam-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend gRPC service
  grpc-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: panchangam-grpc
    command: ["/panchangam-grpc"]
    environment:
      - PORT=50052
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_ENDPOINT:-}
    ports:
      - "50055:50052"
    healthcheck:
      test: ["CMD", "/panchangam-grpc", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    #   redis:
    #     condition: service_healthy

  # Backend HTTP Gateway
  gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    command: ["/panchangam-gateway", "-grpc-endpoint", "grpc-server:50052"]
    container_name: panchangam-gateway
    environment:
      - HTTP_PORT=8080
      - GRPC_ENDPOINT=grpc-server:50052
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:4173,http://localhost:8086}
      - ALLOW_ALL_ORIGINS=${ALLOW_ALL_ORIGINS:-false}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_ENDPOINT:-}
    ports:
      - "8085:8080"
    healthcheck:
      test: ["CMD", "/panchangam-gateway", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - grpc-server

  # Frontend React application
  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: panchangam-frontend
    environment:
      - API_ENDPOINT=${API_ENDPOINT:-http://gateway:8080}
      - PUBLIC_API_ENDPOINT=${PUBLIC_API_ENDPOINT:-}
      - HOST_IP=${HOST_IP:-}
      - VERSION=${VERSION:-dev}
    ports:
      - "8086:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - gateway

  # Monitoring - Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: panchangam-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    profiles: ["monitoring"]

  # Monitoring - Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: panchangam-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    restart: unless-stopped
    profiles: ["monitoring"]
    depends_on:
      - prometheus

  # Log aggregation - Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: panchangam-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  default:
    name: panchangam-network
    driver: bridge