// PanchangamData represents the Panchangam data for a specific date, including Tithi, Nakshatra, Yoga, Karana, sunrise time, sunset time, and any additional events.
// PanchangamEvent represents an event or special occurrence in the Panchangam, such as Rahu Kalam or Yamagandam.
// GetPanchangamRequest is the request message sent to the server to retrieve Panchangam data for a specific date.
//GetPanchangamResponse is the response message containing the requested Panchangam data.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/panchangam.proto

package panchangam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Panchangam_Get_FullMethodName = "/panchangam.Panchangam/Get"
)

// PanchangamClient is the client API for Panchangam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Panchangam service definition
type PanchangamClient interface {
	// RPC method to retrieve Panchangam data for a specific date
	Get(ctx context.Context, in *GetPanchangamRequest, opts ...grpc.CallOption) (*GetPanchangamResponse, error)
}

type panchangamClient struct {
	cc grpc.ClientConnInterface
}

func NewPanchangamClient(cc grpc.ClientConnInterface) PanchangamClient {
	return &panchangamClient{cc}
}

func (c *panchangamClient) Get(ctx context.Context, in *GetPanchangamRequest, opts ...grpc.CallOption) (*GetPanchangamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPanchangamResponse)
	err := c.cc.Invoke(ctx, Panchangam_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PanchangamServer is the server API for Panchangam service.
// All implementations must embed UnimplementedPanchangamServer
// for forward compatibility.
//
// Panchangam service definition
type PanchangamServer interface {
	// RPC method to retrieve Panchangam data for a specific date
	Get(context.Context, *GetPanchangamRequest) (*GetPanchangamResponse, error)
	mustEmbedUnimplementedPanchangamServer()
}

// UnimplementedPanchangamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPanchangamServer struct{}

func (UnimplementedPanchangamServer) Get(context.Context, *GetPanchangamRequest) (*GetPanchangamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPanchangamServer) mustEmbedUnimplementedPanchangamServer() {}
func (UnimplementedPanchangamServer) testEmbeddedByValue()                    {}

// UnsafePanchangamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PanchangamServer will
// result in compilation errors.
type UnsafePanchangamServer interface {
	mustEmbedUnimplementedPanchangamServer()
}

func RegisterPanchangamServer(s grpc.ServiceRegistrar, srv PanchangamServer) {
	// If the following call pancis, it indicates UnimplementedPanchangamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Panchangam_ServiceDesc, srv)
}

func _Panchangam_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPanchangamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanchangamServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Panchangam_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanchangamServer).Get(ctx, req.(*GetPanchangamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Panchangam_ServiceDesc is the grpc.ServiceDesc for Panchangam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Panchangam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panchangam.Panchangam",
	HandlerType: (*PanchangamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Panchangam_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/panchangam.proto",
}
