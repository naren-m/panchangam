// PanchangamData represents the Panchangam data for a specific date, including Tithi, Nakshatra, Yoga, Karana, sunrise time, sunset time, and any additional events.
// PanchangamEvent represents an event or special occurrence in the Panchangam, such as Rahu Kalam or Yamagandam.
// GetPanchangamRequest is the request message sent to the server to retrieve Panchangam data for a specific date.
//GetPanchangamResponse is the response message containing the requested Panchangam data.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/panchangam.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Panchangam data for a specific date
type PanchangamData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Date for which Panchangam data is provided (in ISO 8601 format: YYYY-MM-DD)
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Tithi (lunar day) for the given date
	Tithi string `protobuf:"bytes,2,opt,name=tithi,proto3" json:"tithi,omitempty"`
	// Nakshatra (lunar mansion) for the given date
	Nakshatra string `protobuf:"bytes,3,opt,name=nakshatra,proto3" json:"nakshatra,omitempty"`
	// Yoga for the given date
	Yoga string `protobuf:"bytes,4,opt,name=yoga,proto3" json:"yoga,omitempty"`
	// Karana for the given date
	Karana string `protobuf:"bytes,5,opt,name=karana,proto3" json:"karana,omitempty"`
	// Sunrise time for the given date (in ISO 8601 format: HH:MM:SS)
	SunriseTime string `protobuf:"bytes,6,opt,name=sunrise_time,json=sunriseTime,proto3" json:"sunrise_time,omitempty"`
	// Sunset time for the given date (in ISO 8601 format: HH:MM:SS)
	SunsetTime string `protobuf:"bytes,7,opt,name=sunset_time,json=sunsetTime,proto3" json:"sunset_time,omitempty"`
	// Additional Panchangam details or events for the given date
	Events        []*PanchangamEvent `protobuf:"bytes,8,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PanchangamData) Reset() {
	*x = PanchangamData{}
	mi := &file_proto_panchangam_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PanchangamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanchangamData) ProtoMessage() {}

func (x *PanchangamData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panchangam_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanchangamData.ProtoReflect.Descriptor instead.
func (*PanchangamData) Descriptor() ([]byte, []int) {
	return file_proto_panchangam_proto_rawDescGZIP(), []int{0}
}

func (x *PanchangamData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *PanchangamData) GetTithi() string {
	if x != nil {
		return x.Tithi
	}
	return ""
}

func (x *PanchangamData) GetNakshatra() string {
	if x != nil {
		return x.Nakshatra
	}
	return ""
}

func (x *PanchangamData) GetYoga() string {
	if x != nil {
		return x.Yoga
	}
	return ""
}

func (x *PanchangamData) GetKarana() string {
	if x != nil {
		return x.Karana
	}
	return ""
}

func (x *PanchangamData) GetSunriseTime() string {
	if x != nil {
		return x.SunriseTime
	}
	return ""
}

func (x *PanchangamData) GetSunsetTime() string {
	if x != nil {
		return x.SunsetTime
	}
	return ""
}

func (x *PanchangamData) GetEvents() []*PanchangamEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// Represents an event or special occurrence in the Panchangam
type PanchangamEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name or description of the event
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Time of the event (in ISO 8601 format: HH:MM:SS)
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Optional: Type of event (e.g., RAHU_KALAM, YAMAGANDAM, FESTIVAL)
	EventType     string `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PanchangamEvent) Reset() {
	*x = PanchangamEvent{}
	mi := &file_proto_panchangam_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PanchangamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanchangamEvent) ProtoMessage() {}

func (x *PanchangamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panchangam_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanchangamEvent.ProtoReflect.Descriptor instead.
func (*PanchangamEvent) Descriptor() ([]byte, []int) {
	return file_proto_panchangam_proto_rawDescGZIP(), []int{1}
}

func (x *PanchangamEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PanchangamEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *PanchangamEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

// Request message to retrieve Panchangam data for a specific date
type GetPanchangamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Date for which Panchangam data is requested (in ISO 8601 format: YYYY-MM-DD)
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Latitude of the location (required, -90 to 90)
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude of the location (required, -180 to 180)
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Optional: Timezone identifier (e.g., "Asia/Kolkata")
	Timezone string `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Optional: Regional system (e.g., "Tamil Nadu", "Kerala")
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Optional: Calculation method (e.g., "Drik", "Vakya")
	CalculationMethod string `protobuf:"bytes,6,opt,name=calculation_method,json=calculationMethod,proto3" json:"calculation_method,omitempty"`
	// Optional: Language/locale (e.g., "en", "ta")
	Locale        string `protobuf:"bytes,7,opt,name=locale,proto3" json:"locale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPanchangamRequest) Reset() {
	*x = GetPanchangamRequest{}
	mi := &file_proto_panchangam_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPanchangamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPanchangamRequest) ProtoMessage() {}

func (x *GetPanchangamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panchangam_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPanchangamRequest.ProtoReflect.Descriptor instead.
func (*GetPanchangamRequest) Descriptor() ([]byte, []int) {
	return file_proto_panchangam_proto_rawDescGZIP(), []int{2}
}

func (x *GetPanchangamRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetPanchangamRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetPanchangamRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GetPanchangamRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *GetPanchangamRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetPanchangamRequest) GetCalculationMethod() string {
	if x != nil {
		return x.CalculationMethod
	}
	return ""
}

func (x *GetPanchangamRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

// Response message containing Panchangam data for the requested date
type GetPanchangamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Panchangam data for the requested date
	PanchangamData *PanchangamData `protobuf:"bytes,1,opt,name=panchangam_data,json=panchangamData,proto3" json:"panchangam_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetPanchangamResponse) Reset() {
	*x = GetPanchangamResponse{}
	mi := &file_proto_panchangam_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPanchangamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPanchangamResponse) ProtoMessage() {}

func (x *GetPanchangamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_panchangam_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPanchangamResponse.ProtoReflect.Descriptor instead.
func (*GetPanchangamResponse) Descriptor() ([]byte, []int) {
	return file_proto_panchangam_proto_rawDescGZIP(), []int{3}
}

func (x *GetPanchangamResponse) GetPanchangamData() *PanchangamData {
	if x != nil {
		return x.PanchangamData
	}
	return nil
}

var File_proto_panchangam_proto protoreflect.FileDescriptor

const file_proto_panchangam_proto_rawDesc = "" +
	"\n" +
	"\x16proto/panchangam.proto\x12\n" +
	"panchangam\"\xfd\x01\n" +
	"\x0ePanchangamData\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x14\n" +
	"\x05tithi\x18\x02 \x01(\tR\x05tithi\x12\x1c\n" +
	"\tnakshatra\x18\x03 \x01(\tR\tnakshatra\x12\x12\n" +
	"\x04yoga\x18\x04 \x01(\tR\x04yoga\x12\x16\n" +
	"\x06karana\x18\x05 \x01(\tR\x06karana\x12!\n" +
	"\fsunrise_time\x18\x06 \x01(\tR\vsunriseTime\x12\x1f\n" +
	"\vsunset_time\x18\a \x01(\tR\n" +
	"sunsetTime\x123\n" +
	"\x06events\x18\b \x03(\v2\x1b.panchangam.PanchangamEventR\x06events\"X\n" +
	"\x0fPanchangamEvent\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04time\x18\x02 \x01(\tR\x04time\x12\x1d\n" +
	"\n" +
	"event_type\x18\x03 \x01(\tR\teventType\"\xdf\x01\n" +
	"\x14GetPanchangamRequest\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x1a\n" +
	"\blatitude\x18\x02 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x03 \x01(\x01R\tlongitude\x12\x1a\n" +
	"\btimezone\x18\x04 \x01(\tR\btimezone\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12-\n" +
	"\x12calculation_method\x18\x06 \x01(\tR\x11calculationMethod\x12\x16\n" +
	"\x06locale\x18\a \x01(\tR\x06locale\"\\\n" +
	"\x15GetPanchangamResponse\x12C\n" +
	"\x0fpanchangam_data\x18\x01 \x01(\v2\x1a.panchangam.PanchangamDataR\x0epanchangamData2X\n" +
	"\n" +
	"Panchangam\x12J\n" +
	"\x03Get\x12 .panchangam.GetPanchangamRequest\x1a!.panchangam.GetPanchangamResponseB%Z#github.com/naren-m/panchangam/protob\x06proto3"

var (
	file_proto_panchangam_proto_rawDescOnce sync.Once
	file_proto_panchangam_proto_rawDescData []byte
)

func file_proto_panchangam_proto_rawDescGZIP() []byte {
	file_proto_panchangam_proto_rawDescOnce.Do(func() {
		file_proto_panchangam_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_panchangam_proto_rawDesc), len(file_proto_panchangam_proto_rawDesc)))
	})
	return file_proto_panchangam_proto_rawDescData
}

var file_proto_panchangam_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_panchangam_proto_goTypes = []any{
	(*PanchangamData)(nil),        // 0: panchangam.PanchangamData
	(*PanchangamEvent)(nil),       // 1: panchangam.PanchangamEvent
	(*GetPanchangamRequest)(nil),  // 2: panchangam.GetPanchangamRequest
	(*GetPanchangamResponse)(nil), // 3: panchangam.GetPanchangamResponse
}
var file_proto_panchangam_proto_depIdxs = []int32{
	1, // 0: panchangam.PanchangamData.events:type_name -> panchangam.PanchangamEvent
	0, // 1: panchangam.GetPanchangamResponse.panchangam_data:type_name -> panchangam.PanchangamData
	2, // 2: panchangam.Panchangam.Get:input_type -> panchangam.GetPanchangamRequest
	3, // 3: panchangam.Panchangam.Get:output_type -> panchangam.GetPanchangamResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_panchangam_proto_init() }
func file_proto_panchangam_proto_init() {
	if File_proto_panchangam_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_panchangam_proto_rawDesc), len(file_proto_panchangam_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_panchangam_proto_goTypes,
		DependencyIndexes: file_proto_panchangam_proto_depIdxs,
		MessageInfos:      file_proto_panchangam_proto_msgTypes,
	}.Build()
	File_proto_panchangam_proto = out.File
	file_proto_panchangam_proto_goTypes = nil
	file_proto_panchangam_proto_depIdxs = nil
}
