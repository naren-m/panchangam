name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write
  checks: write

jobs:
  # ===========================
  # Code Quality & Security Jobs
  # ===========================
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ui/package-lock.json'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Install Node.js dependencies
        working-directory: ui
        run: npm ci

      - name: Run Go static analysis
        run: |
          go vet ./...
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Run Go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted. Please run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi

      - name: Run ESLint
        working-directory: ui
        run: npm run lint

      - name: Run Prettier check
        working-directory: ui
        run: npm run format:check

      - name: Check Go mod tidy
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "go.mod or go.sum is not tidy. Please run 'go mod tidy'"
            git diff go.mod go.sum
            exit 1
          fi

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install and run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./... || true
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
        if: always() && hashFiles('gosec-results.sarif') != ''

      - name: Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -m all | nancy sleuth

      - name: Node.js security audit
        working-directory: ui
        run: npm audit --audit-level=high

  # ===========================
  # Backend Testing Jobs
  # ===========================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below 80% threshold"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: backend
          name: backend-coverage

      - name: Run integration tests
        run: |
          # Start test dependencies if needed
          make test-integration || go test -tags=integration ./...

      - name: Run service validation
        run: |
          go run cmd/test-service/main.go

  # ===========================
  # Frontend Testing Jobs
  # ===========================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ui/package-lock.json'

      - name: Install dependencies
        working-directory: ui
        run: npm ci

      - name: Run type checking
        working-directory: ui
        run: npm run typecheck

      - name: Run unit tests
        working-directory: ui
        run: |
          npm run test:coverage

      - name: Check coverage threshold
        working-directory: ui
        run: |
          npm run test:coverage:check

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./ui/coverage
          flags: frontend
          name: frontend-coverage

  # ===========================
  # End-to-End Testing Jobs
  # ===========================
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    services:
      backend:
        image: golang:1.21
        options: >-
          --health-cmd "curl -f http://localhost:8080/api/v1/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ui/package-lock.json'

      - name: Install backend dependencies
        run: go mod download

      - name: Install frontend dependencies
        working-directory: ui
        run: npm ci

      - name: Build backend
        run: |
          go build -o bin/panchangam-gateway ./cmd/gateway
          go build -o bin/panchangam-grpc ./cmd/grpc-server

      - name: Build frontend
        working-directory: ui
        run: npm run build

      - name: Start backend services
        run: |
          ./bin/panchangam-grpc &
          sleep 5
          ./bin/panchangam-gateway &
          sleep 10
        env:
          GRPC_PORT: 50052
          HTTP_PORT: 8080

      - name: Start frontend
        working-directory: ui
        run: |
          npm run preview &
          sleep 10
        env:
          VITE_API_ENDPOINT: http://localhost:8080

      - name: Wait for services
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:8080/api/v1/health; do sleep 2; done'
          timeout 60s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'

      - name: Install Playwright
        working-directory: ui
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ui
        run: |
          npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ui/playwright-report/
          retention-days: 30

  # ===========================
  # Build & Package Jobs
  # ===========================
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, backend-test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          file: ./ui/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ===========================
  # Deployment Jobs
  # ===========================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, e2e-test]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment:
      name: staging
      url: https://panchangam-staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
          echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
          # Add actual deployment logic here (k8s, docker-compose, etc.)

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test logic here

      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://panchangam-staging.example.com'
            });

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, e2e-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    environment:
      name: production
      url: https://panchangam.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
          echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
          # Add actual deployment logic here

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production smoke test logic here

      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://panchangam.example.com'
            });

  # ===========================
  # Notification & Cleanup Jobs
  # ===========================
  notify-completion:
    name: Notify Pipeline Completion
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Evaluate pipeline status
        id: status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Timestamp |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.deploy-staging.result }} | $(date) |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.deploy-production.result }} | $(date) |" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const message = `${emoji} **CI/CD Pipeline ${status}**\n\n` +
              `**Build Results:**\n` +
              `- Code Quality: ${{ needs.code-quality.result }}\n` +
              `- Security Scan: ${{ needs.security-scan.result }}\n` +
              `- Backend Tests: ${{ needs.backend-test.result }}\n` +
              `- Frontend Tests: ${{ needs.frontend-test.result }}\n` +
              `- E2E Tests: ${{ needs.e2e-test.result }}\n` +
              `- Backend Build: ${{ needs.build-backend.result }}\n` +
              `- Frontend Build: ${{ needs.build-frontend.result }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [notify-completion]
    if: always()
    steps:
      - name: Clean up temporary resources
        run: |
          echo "Cleaning up temporary resources..."
          # Add cleanup logic for any temporary resources created during pipeline